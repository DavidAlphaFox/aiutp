CMAKE_MINIMUM_REQUIRED(VERSION 3.2)

PROJECT(aiutp LANGUAGES C CXX)

INCLUDE(CheckLibraryExists)
INCLUDE(CheckFunctionExists)
# Include more Cmake code to find other libs
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
INCLUDE(${CMAKE_SOURCE_DIR}/cmake/FindErlang.cmake)

# Find Erlang using FindErlang.cmake
FIND_PACKAGE(Erlang  REQUIRED)


CHECK_LIBRARY_EXISTS(rt clock_gettime "" HAVE_LIB_RT)
SET(HAVE_CLOCK_GETTIME ${HAVE_LIB_RT})

IF(NOT HAVE_LIB_RT)
   SET(CMAKE_EXTRA_INCLUDE_FILES time.h)
   CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
   SET(CMAKE_EXTRA_INCLUDE_FILES)
ENDIF()


SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/priv)

IF(NOT CMAKE_C_STANDARD)
  # This project can use C11, but will gracefully decay down to C89.
  SET(CMAKE_C_STANDARD 11)
  SET(CMAKE_C_STANDARD_REQUIRED ON)
  IF(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    SET(CMAKE_C_EXTENSIONS ON)
  ELSE()
    SET(CMAKE_C_EXTENSIONS OFF)
  ENDIF()
ENDIF(NOT CMAKE_C_STANDARD)

# C++ standard can be overridden when this is used as a sub-project.
IF(NOT CMAKE_CXX_STANDARD)
  # This project requires C++11.
  SET(CMAKE_CXX_STANDARD 11)
  SET(CMAKE_CXX_STANDARD_REQUIRED ON)
  IF(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    SET(CMAKE_CXX_EXTENSIONS ON)
  ELSE()
    SET(CMAKE_CXX_EXTENSIONS OFF)
  ENDIF()
ENDIF(NOT CMAKE_CXX_STANDARD)

FILE(GLOB UTP_SRC c_src/*.c*)

ADD_LIBRARY(aiutp SHARED ${UTP_SRC})

INCLUDE_DIRECTORIES(
  SYSTEM
  c_include
  ${Erlang_EI_INCLUDE_DIR}
  ${Erlang_EI_DIR}/src)

ADD_COMPILE_OPTIONS(
  -DPOSIX
  -DHAVE_CLOCK_GETTIME=${HAVE_CLOCK_GETTIME}
  -fno-exceptions
  -fno-rtti)

LINK_DIRECTORIES(${Erlang_EI_LIBRARY_DIR})
LINK_LIBRARIES(${Erlang_EI_LIBRARIES})

IF(HAVE_LIB_RT)
  LINK_LIBRARIES(rt)
ENDIF()
